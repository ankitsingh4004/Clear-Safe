package com.workorder.app.fragment;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.workorder.app.ConnectivityReceiver;
import com.workorder.app.R;
import com.workorder.app.Util;
import com.workorder.app.adapter.SWMSAdapter;
import com.workorder.app.adapter.SurveyAdapter;
import com.workorder.app.core.base.BaseFragment;
import com.workorder.app.pojo.docPOJO.DocListPOJO;
import com.workorder.app.pojo.survey.SurveyPOJO;
import com.workorder.app.util.Constants;
import com.workorder.app.util.UrlClass;
import com.workorder.app.webservicecallback.GetApiCallback;
import com.workorder.app.webservicecallback.OnTaskCompleted;
import com.workorder.app.webservicecallback.SendAnswerData;
import com.workorder.app.webservicecallback.SendData;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SurveyFragment extends BaseFragment implements SurveyAdapter.RatingSelectionInterface {

    SurveyAdapter adapter;
    RecyclerView rv_sync_task_list;
    LinearLayout next;
    LinearLayout back;
    int i=0;
    TextView sub;
    List<SurveyPOJO> lcs;
    String requestBody;
    private Map<String,String> map=new HashMap<>();

    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        final View rootView = inflater.inflate(R.layout.fragment_survey, container, false);

        next=rootView.findViewById(R.id.next);
        back=rootView.findViewById(R.id.back);
        sub=rootView.findViewById(R.id.sub);
        rv_sync_task_list=rootView.findViewById(R.id.rv_sync_task_list);
        rv_sync_task_list.setLayoutManager(new LinearLayoutManager(getActivity()));



        try {
            new GetApiCallback(getActivity(), UrlClass.SURVEY_URL, new OnTaskCompleted<String>() {
                @Override
                public void onTaskCompleted(String response) {
                    Type collectionType = new TypeToken<List<SurveyPOJO>>(){}.getType();
                    lcs = (List<SurveyPOJO>) new Gson().fromJson( response , collectionType);
                    getlist(i);

                }
            },true).execute();
        }catch (Exception e)
        {
            Log.d("ShowListExceptiion",e.toString());
        }


        back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                i=i-1;
                adapter.notifyDataSetChanged();
                getlist(i);
                if(i==0){
                    back.setVisibility(View.GONE);
                }
                if(i<lcs.size()){
                    sub.setText("Next");
                }
                if(i==lcs.size()){
                    sub.setText("Submit");
                }
            }
        });
        next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                back.setVisibility(View.VISIBLE);
                if(i<lcs.size()) {
                    i = i + 1;
                    adapter.notifyDataSetChanged();
                    getlist(i);
                    if(i==lcs.size()){
                        sub.setText("Submit");
                    }
                }
                 else if(i==lcs.size()){
                        sub.setText("Submit");
                        JSONArray jsonArray = new JSONArray();
                        for (Map.Entry<String, String> mmap : map.entrySet()) {
                            JSONObject jsonObject = new JSONObject();
                            try {
                                String srValue = mmap.getValue();
                                String aa = srValue.substring(mmap.getValue().indexOf(",") + 1);
                                String surveyAnswerID = Util.before(aa, ",");
                                String aaa = aa.substring(aa.indexOf(",") + 1);
                                String surveyID = Util.before(aaa, ",");
                                String aaaa = aaa.substring(aaa.indexOf(",") + 1);
                                String SurveyorIDt = Util.before(aaaa, ",");

                                jsonObject.put("questionID", mmap.getKey());
                                jsonObject.put("answerID", Util.before(mmap.getValue(), ","));
                                jsonObject.put("surveyAnswerID", surveyAnswerID);
                                jsonObject.put("surveyID", surveyID);
                                jsonObject.put("SurveyorIDt", SurveyorIDt);

                                jsonArray.put(jsonObject);

                            } catch (Exception e) {
                            }
                        }

                        requestBody = jsonArray.toString();

                            boolean isConnected = ConnectivityReceiver.isConnected();
                            if (isConnected == true) {

                                StringRequest stringRequest = new StringRequest(Request.Method.POST, UrlClass.SUBMIT_ANSWER,
                                        new Response.Listener<String>() {
                                            @Override
                                            public void onResponse(String response) {

                                                JSONObject jsonObject= null;
                                                try {
                                                    jsonObject = new JSONObject(response);
                                                    String message=jsonObject.getString("msg");
                                                    Toast.makeText(getContext(), "" + message, Toast.LENGTH_SHORT).show();
                                                    next.setEnabled(false);
                                                    //   map.clear();
//                                            Fragment  fragment = new AssessmentHomeFragment();
//                                            if (fragment != null) {
//                                                getFragmentManager().beginTransaction().add(R.id.container, fragment, null).addToBackStack(null).commit();
//
//                                            }
                                                } catch (JSONException e) {
                                                    e.printStackTrace();
                                                }


                                            }
                                        }, new Response.ErrorListener() {
                                    @Override
                                    public void onErrorResponse(VolleyError error) {
                                        Toast.makeText(getContext(), "Error" + error, Toast.LENGTH_SHORT).show();

                                    }
                                }) {
                                    @Override
                                    public String getBodyContentType() {
                                        return String.format("application/json; charset=utf-8");
                                    }

                                    @Override

                                    public byte[] getBody() throws AuthFailureError {
                                        try {
                                            return requestBody == null ? null : requestBody.getBytes("utf-8");
                                        } catch (UnsupportedEncodingException uee) {
                                            return null;
                                        }
                                    }
                                };
                                RequestQueue requestQueue = Volley.newRequestQueue(getContext());
                                requestQueue.add(stringRequest);

                            } else {
                                SharedPreferences mPrefs = getContext().getSharedPreferences("PREFS_NAME",Context.MODE_PRIVATE);
                                SharedPreferences.Editor prefsEditor = mPrefs.edit();
                                prefsEditor.putString("jsonarray", jsonArray.toString());
                                prefsEditor.commit();

                                Toast.makeText(getContext(),"Network Not Available",Toast.LENGTH_LONG).show();
                            }


                        Log.v("requestBody", requestBody);




                }else{

//                            new SendAnswerData(getContext(), jsonArray, UrlClass.SUBMIT_ANSWER, new OnTaskCompleted<String>() {
//                                @Override
//                                public void onTaskCompleted(String response) {
//                                    Log.d("UpdateResponse", response);
//                                    if (Constants.SEND_STATUS==200) {
//                                        Toast.makeText(getContext(),"Saved successfully",Toast.LENGTH_LONG).show();
//                                    }
//                                }
//                            }, true).execute();





                }
            }
        });


        return rootView;
    }

    private void getlist(int p) {
        adapter=new SurveyAdapter(getActivity(),lcs,p,this,map);
        rv_sync_task_list.setAdapter(adapter);
    }

    @Override
    public void onStart() {
        super.onStart();
    }

    @Override
    public void itemselect(String questionID, String answerID, String surveyAnswerID, String surveyID, String SurveyorIDt,int rd) {
        map.put(questionID,answerID+","+surveyAnswerID+","+surveyID+","+SurveyorIDt+","+rd);
        Log.v("SELECt",map.toString());
    }

    @Override
    public void itemUnSelect(int questionID) {

    }

    @Override
    public void init() {

    }

    @Override
    public void log(String message) {

    }
}
